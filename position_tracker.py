import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass, asdict
import json
import os

@dataclass
class RealPosition:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
    id: str
    symbol: str
    direction: str  # 'LONG' –∏–ª–∏ 'SHORT'
    entry_price: float
    quantity: float
    entry_time: datetime
    strategy: str
    confidence: float
    
    # –£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    trailing_stop: Optional[float] = None
    
    # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_price: Optional[float] = None
    unrealized_pnl: Optional[float] = None
    unrealized_pnl_pct: Optional[float] = None
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–∑–∏—Ü–∏–∏
    is_active: bool = True
    exit_alerts: List[str] = None
    last_update: Optional[datetime] = None
    
    def __post_init__(self):
        if self.exit_alerts is None:
            self.exit_alerts = []

class PositionTracker:
    """–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    
    def __init__(self, data_file: str = "positions.json"):
        self.data_file = data_file
        self.positions: Dict[str, RealPosition] = {}
        self.load_positions()
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
        self.default_stop_loss_pct = 3.0  # 3% —Å—Ç–æ–ø-–ª–æ—Å—Å
        self.default_take_profit_pct = 6.0  # 6% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (1:2 —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ)
        self.trailing_stop_activation = 4.0  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –ø—Ä–∏ 4% –ø—Ä–∏–±—ã–ª–∏
        self.trailing_stop_distance = 2.0  # –î–∏—Å—Ç–∞–Ω—Ü–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ 2%
    
    def generate_position_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø–æ–∑–∏—Ü–∏–∏"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        return f"POS_{timestamp}_{len(self.positions):03d}"
    
    def add_position(self, symbol: str, direction: str, entry_price: float, 
                    quantity: float, strategy: str, confidence: float,
                    custom_stop_loss: Optional[float] = None,
                    custom_take_profit: Optional[float] = None) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        
        position_id = self.generate_position_id()
        
        # –†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        if direction == 'LONG':
            if custom_stop_loss is None:
                stop_loss = entry_price * (1 - self.default_stop_loss_pct / 100)
            else:
                stop_loss = custom_stop_loss
                
            if custom_take_profit is None:
                take_profit = entry_price * (1 + self.default_take_profit_pct / 100)
            else:
                take_profit = custom_take_profit
        else:  # SHORT
            if custom_stop_loss is None:
                stop_loss = entry_price * (1 + self.default_stop_loss_pct / 100)
            else:
                stop_loss = custom_stop_loss
                
            if custom_take_profit is None:
                take_profit = entry_price * (1 - self.default_take_profit_pct / 100)
            else:
                take_profit = custom_take_profit
        
        position = RealPosition(
            id=position_id,
            symbol=symbol,
            direction=direction,
            entry_price=entry_price,
            quantity=quantity,
            entry_time=datetime.now(),
            strategy=strategy,
            confidence=confidence,
            stop_loss=stop_loss,
            take_profit=take_profit,
            current_price=entry_price,
            last_update=datetime.now()
        )
        
        self.positions[position_id] = position
        self.save_positions()
        
        return position_id
    
    def update_position_prices(self, current_prices: Dict[str, float]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        
        for position_id, position in self.positions.items():
            if not position.is_active:
                continue
                
            symbol_clean = position.symbol.replace('/', '')
            if symbol_clean in current_prices:
                position.current_price = current_prices[symbol_clean]
                position.last_update = datetime.now()
                
                # –†–∞—Å—á–µ—Ç –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
                if position.direction == 'LONG':
                    position.unrealized_pnl = (position.current_price - position.entry_price) * position.quantity
                    position.unrealized_pnl_pct = ((position.current_price / position.entry_price) - 1) * 100
                else:  # SHORT
                    position.unrealized_pnl = (position.entry_price - position.current_price) * position.quantity
                    position.unrealized_pnl_pct = ((position.entry_price / position.current_price) - 1) * 100
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞
                self._check_exit_conditions(position)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
                self._update_trailing_stop(position)
        
        self.save_positions()
    
    def _check_exit_conditions(self, position: RealPosition):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""
        
        if not position.current_price:
            return
        
        alerts = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
        if position.stop_loss:
            if position.direction == 'LONG' and position.current_price <= position.stop_loss:
                alerts.append(f"üõë –°–¢–û–ü-–õ–û–°–°! –¶–µ–Ω–∞ {position.current_price:.4f} –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è {position.stop_loss:.4f}")
            elif position.direction == 'SHORT' and position.current_price >= position.stop_loss:
                alerts.append(f"üõë –°–¢–û–ü-–õ–û–°–°! –¶–µ–Ω–∞ {position.current_price:.4f} –¥–æ—Å—Ç–∏–≥–ª–∞ —É—Ä–æ–≤–Ω—è {position.stop_loss:.4f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        if position.take_profit:
            if position.direction == 'LONG' and position.current_price >= position.take_profit:
                alerts.append(f"üéØ –¢–ï–ô–ö-–ü–†–û–§–ò–¢! –¶–µ–Ω–∞ {position.current_price:.4f} –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–∏ {position.take_profit:.4f}")
            elif position.direction == 'SHORT' and position.current_price <= position.take_profit:
                alerts.append(f"üéØ –¢–ï–ô–ö-–ü–†–û–§–ò–¢! –¶–µ–Ω–∞ {position.current_price:.4f} –¥–æ—Å—Ç–∏–≥–ª–∞ —Ü–µ–ª–∏ {position.take_profit:.4f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
        if position.trailing_stop:
            if position.direction == 'LONG' and position.current_price <= position.trailing_stop:
                alerts.append(f"üìâ –¢–†–ï–ô–õ–ò–ù–ì-–°–¢–û–ü! –¶–µ–Ω–∞ {position.current_price:.4f} —É–ø–∞–ª–∞ –¥–æ {position.trailing_stop:.4f}")
            elif position.direction == 'SHORT' and position.current_price >= position.trailing_stop:
                alerts.append(f"üìà –¢–†–ï–ô–õ–ò–ù–ì-–°–¢–û–ü! –¶–µ–Ω–∞ {position.current_price:.4f} –≤—ã—Ä–æ—Å–ª–∞ –¥–æ {position.trailing_stop:.4f}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if position.unrealized_pnl_pct:
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫—Ä—É–ø–Ω—ã—Ö —É–±—ã—Ç–∫–∞—Ö
            if position.unrealized_pnl_pct < -5:
                alerts.append(f"‚ö†Ô∏è –ö–†–£–ü–ù–´–ô –£–ë–´–¢–û–ö: {position.unrealized_pnl_pct:.2f}% - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—ã—Ö–æ–¥")
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ö–æ—Ä–æ—à–µ–π –ø—Ä–∏–±—ã–ª–∏
            elif position.unrealized_pnl_pct > 8:
                alerts.append(f"üí∞ –û–¢–õ–ò–ß–ù–ê–Ø –ü–†–ò–ë–´–õ–¨: {position.unrealized_pnl_pct:.2f}% - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —á–∞—Å—Ç–∏—á–Ω—É—é —Ñ–∏–∫—Å–∞—Ü–∏—é")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        for alert in alerts:
            if alert not in position.exit_alerts:
                position.exit_alerts.append(alert)
    
    def _update_trailing_stop(self, position: RealPosition):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞"""
        
        if not position.current_price or not position.unrealized_pnl_pct:
            return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        if position.unrealized_pnl_pct >= self.trailing_stop_activation:
            
            if position.direction == 'LONG':
                new_trailing_stop = position.current_price * (1 - self.trailing_stop_distance / 100)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–≥–æ
                if not position.trailing_stop or new_trailing_stop > position.trailing_stop:
                    position.trailing_stop = new_trailing_stop
            
            else:  # SHORT
                new_trailing_stop = position.current_price * (1 + self.trailing_stop_distance / 100)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–≥–æ
                if not position.trailing_stop or new_trailing_stop < position.trailing_stop:
                    position.trailing_stop = new_trailing_stop
    
    def close_position(self, position_id: str, exit_price: float, reason: str = "Manual"):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏"""
        
        if position_id in self.positions:
            position = self.positions[position_id]
            position.is_active = False
            position.current_price = exit_price
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç P&L
            if position.direction == 'LONG':
                final_pnl = (exit_price - position.entry_price) * position.quantity
                final_pnl_pct = ((exit_price / position.entry_price) - 1) * 100
            else:  # SHORT
                final_pnl = (position.entry_price - exit_price) * position.quantity
                final_pnl_pct = ((position.entry_price / exit_price) - 1) * 100
            
            position.unrealized_pnl = final_pnl
            position.unrealized_pnl_pct = final_pnl_pct
            position.exit_alerts.append(f"‚úÖ –ü–û–ó–ò–¶–ò–Ø –ó–ê–ö–†–´–¢–ê: {reason} | P&L: {final_pnl_pct:.2f}%")
            
            self.save_positions()
            return True
        
        return False
    
    def get_active_positions(self) -> List[RealPosition]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        return [pos for pos in self.positions.values() if pos.is_active]
    
    def get_position_summary(self) -> Dict:
        """–°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–∑–∏—Ü–∏—è–º"""
        
        try:
            active_positions = self.get_active_positions()
            closed_positions = [pos for pos in self.positions.values() if not pos.is_active]
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
            summary = {
                'total_positions': len(self.positions),
                'active_positions': len(active_positions),
                'closed_positions': len(closed_positions),
                'total_unrealized_pnl': 0.0,
                'total_unrealized_pnl_pct': 0.0,
                'alerts_count': 0,
                'win_rate': 0.0
            }
            
            if not active_positions and not closed_positions:
                return summary
        
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            if active_positions:
                total_unrealized_pnl = sum(pos.unrealized_pnl or 0 for pos in active_positions)
                total_entry_value = sum(pos.entry_price * pos.quantity for pos in active_positions if pos.entry_price and pos.quantity)
                
                if total_entry_value > 0:
                    summary['total_unrealized_pnl'] = total_unrealized_pnl
                    summary['total_unrealized_pnl_pct'] = (total_unrealized_pnl / total_entry_value) * 100
                
                # –ü–æ–¥—Å—á–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤
                summary['alerts_count'] = sum(len(pos.exit_alerts or []) for pos in active_positions)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º –ø–æ–∑–∏—Ü–∏—è–º
            if closed_positions:
                closed_pnl = [pos.unrealized_pnl_pct for pos in closed_positions if pos.unrealized_pnl_pct is not None]
                if closed_pnl:
                    winning_positions = len([pnl for pnl in closed_pnl if pnl > 0])
                    summary['win_rate'] = (winning_positions / len(closed_pnl)) * 100
            
            return summary
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ get_position_summary: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            return {
                'total_positions': 0,
                'active_positions': 0,
                'closed_positions': 0,
                'total_unrealized_pnl': 0.0,
                'total_unrealized_pnl_pct': 0.0,
                'alerts_count': 0,
                'win_rate': 0.0
            }
    
    def get_risk_recommendations(self, symbol: str, entry_price: float, 
                               direction: str, account_balance: float = 10000) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É"""
        
        risk_per_trade = 0.02  # 2% —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É
        
        if direction == 'LONG':
            recommended_stop_loss = entry_price * (1 - self.default_stop_loss_pct / 100)
            recommended_take_profit = entry_price * (1 + self.default_take_profit_pct / 100)
        else:  # SHORT
            recommended_stop_loss = entry_price * (1 + self.default_stop_loss_pct / 100)
            recommended_take_profit = entry_price * (1 - self.default_take_profit_pct / 100)
        
        # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
        risk_amount = account_balance * risk_per_trade
        price_risk = abs(entry_price - recommended_stop_loss)
        position_size = risk_amount / price_risk if price_risk > 0 else 0
        
        return {
            'recommended_stop_loss': recommended_stop_loss,
            'recommended_take_profit': recommended_take_profit,
            'position_size': position_size,
            'risk_amount': risk_amount,
            'risk_reward_ratio': abs(recommended_take_profit - entry_price) / abs(entry_price - recommended_stop_loss) if price_risk > 0 else 0,
            'notes': [
                f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {position_size:.4f} {symbol.split('/')[0]}",
                f"üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: ${recommended_stop_loss:.4f} ({self.default_stop_loss_pct}%)",
                f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${recommended_take_profit:.4f} ({self.default_take_profit_pct}%)",
                f"üìä –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É: ${risk_amount:.2f} ({risk_per_trade*100}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞)",
                f"‚öñÔ∏è –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å: 1:{abs(recommended_take_profit - entry_price) / abs(entry_price - recommended_stop_loss):.1f}" if price_risk > 0 else ""
            ]
        }
    
    def get_real_trade_history(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤)"""
        
        real_trades = []
        for position in self.positions.values():
            if not position.is_active:  # –¢–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                real_trades.append({
                    'timestamp': position.entry_time,
                    'symbol': position.symbol,
                    'direction': position.direction,
                    'entry_price': position.entry_price,
                    'exit_price': position.current_price,
                    'pnl_pct': position.unrealized_pnl_pct,
                    'strategy': position.strategy,
                    'duration': (datetime.now() - position.entry_time).days if position.is_active else 
                               (position.last_update - position.entry_time).days if position.last_update else 0
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        real_trades.sort(key=lambda x: x['timestamp'], reverse=True)
        return real_trades
    
    def save_positions(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –≤ —Ñ–∞–π–ª"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
            positions_data = {}
            for pos_id, position in self.positions.items():
                pos_dict = asdict(position)
                pos_dict['entry_time'] = position.entry_time.isoformat()
                if position.last_update:
                    pos_dict['last_update'] = position.last_update.isoformat()
                positions_data[pos_id] = pos_dict
            
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(positions_data, f, indent=2, ensure_ascii=False)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    def load_positions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    positions_data = json.load(f)
                
                for pos_id, pos_dict in positions_data.items():
                    try:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ datetime
                        pos_dict['entry_time'] = datetime.fromisoformat(pos_dict['entry_time'])
                        if pos_dict.get('last_update'):
                            pos_dict['last_update'] = datetime.fromisoformat(pos_dict['last_update'])
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                        required_fields = ['id', 'symbol', 'direction', 'entry_price', 'quantity', 'strategy', 'confidence']
                        if all(field in pos_dict for field in required_fields):
                            self.positions[pos_id] = RealPosition(**pos_dict)
                        else:
                            print(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è {pos_id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                            
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ {pos_id}: {e}")
                        continue
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            self.positions = {}


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–∫–µ—Ä
    tracker = PositionTracker()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    position_id = tracker.add_position(
        symbol="BTC/USDT",
        direction="LONG",
        entry_price=50000,
        quantity=0.1,
        strategy="trend_following",
        confidence=85
    )
    
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {position_id}")
    print("‚úÖ –§–∞–π–ª position_tracker.py –≥–æ—Ç–æ–≤!")