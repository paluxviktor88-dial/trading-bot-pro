import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
import requests
from strategies import BaseStrategy, TradeSignal
from indicators import TechnicalIndicators

@dataclass
class MarketSentiment:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞"""
    btc_dominance: float
    fear_greed_index: float
    market_trend: str  # 'BULL', 'BEAR', 'SIDEWAYS'
    volatility_level: str  # 'LOW', 'MEDIUM', 'HIGH'

class DominanceCorrelationStrategy(BaseStrategy):
    """
    üî• –ê–í–¢–û–†–°–ö–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: Bitcoin Dominance + Correlation Analysis
    
    –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π:
    1. –î–æ–º–∏–Ω–∞—Ü–∏—é Bitcoin –Ω–∞ —Ä—ã–Ω–∫–µ
    2. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—é –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤ —Å BTC
    3. –†—ã–Ω–æ—á–Ω—ã–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç –∏ —Ü–∏–∫–ª—ã
    4. –°–µ–∑–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    """
    
    def __init__(self, btc_dominance_threshold: float = 2.0, 
                 correlation_period: int = 30, risk_level: str = 'MEDIUM'):
        super().__init__("Dominance_Correlation_Strategy")
        self.btc_dominance_threshold = btc_dominance_threshold
        self.correlation_period = correlation_period
        self.risk_level = risk_level  # 'LOW', 'MEDIUM', 'HIGH'
        self.btc_data = None
        
    def get_btc_dominance(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–æ–º–∏–Ω–∞—Ü–∏–∏ Bitcoin"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º CoinGecko API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∏–Ω–∞—Ü–∏–∏ BTC
            url = "https://api.coingecko.com/api/v3/global"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                dominance = data['data']['market_cap_percentage']['btc']
                return dominance
            else:
                # Fallback: –ø—Ä–∏–º–µ—Ä–Ω–∞—è –¥–æ–º–∏–Ω–∞—Ü–∏—è –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                return 42.0
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∏–Ω–∞—Ü–∏–∏ BTC: {e}")
            return 42.0  # –°—Ä–µ–¥–Ω—è—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –¥–æ–º–∏–Ω–∞—Ü–∏—è
    
    def calculate_correlation_with_btc(self, symbol_data: pd.DataFrame, 
                                     btc_data: pd.DataFrame) -> float:
        """–†–∞—Å—á–µ—Ç –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∞–ª—å—Ç–∫–æ–∏–Ω–∞ —Å Bitcoin"""
        try:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            common_index = symbol_data.index.intersection(btc_data.index)
            
            if len(common_index) < 20:  # –ú–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                return 0.5  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
            
            symbol_returns = symbol_data.loc[common_index, 'close'].pct_change().dropna()
            btc_returns = btc_data.loc[common_index, 'close'].pct_change().dropna()
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –ø–µ—Ä–∏–æ–¥–æ–≤
            if len(symbol_returns) > self.correlation_period:
                symbol_returns = symbol_returns.tail(self.correlation_period)
                btc_returns = btc_returns.tail(self.correlation_period)
            
            correlation = symbol_returns.corr(btc_returns)
            
            return correlation if not pd.isna(correlation) else 0.5
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏: {e}")
            return 0.5
    
    def analyze_market_sentiment(self, data: pd.DataFrame) -> MarketSentiment:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∏–Ω–∞—Ü–∏—é BTC
        btc_dominance = self.get_btc_dominance()
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        recent_returns = data['close'].pct_change().tail(14).std()
        
        if recent_returns < 0.02:
            volatility = 'LOW'
        elif recent_returns < 0.05:
            volatility = 'MEDIUM'
        else:
            volatility = 'HIGH'
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –ø–æ EMA
        ema_short = self.indicators.ema(data['close'], 10).iloc[-1]
        ema_long = self.indicators.ema(data['close'], 30).iloc[-1]
        current_price = data['close'].iloc[-1]
        
        if current_price > ema_short > ema_long:
            trend = 'BULL'
        elif current_price < ema_short < ema_long:
            trend = 'BEAR'
        else:
            trend = 'SIDEWAYS'
        
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–π Fear & Greed –∏–Ω–¥–µ–∫—Å (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
        rsi = self.indicators.rsi(data['close']).iloc[-1]
        if rsi > 70:
            fear_greed = 75  # –ñ–∞–¥–Ω–æ—Å—Ç—å
        elif rsi < 30:
            fear_greed = 25  # –°—Ç—Ä–∞—Ö
        else:
            fear_greed = 50  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
        
        return MarketSentiment(
            btc_dominance=btc_dominance,
            fear_greed_index=fear_greed,
            market_trend=trend,
            volatility_level=volatility
        )
    
    def get_seasonal_factor(self) -> float:
        """–°–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑)"""
        current_month = datetime.now().month
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏ —Å–∏–ª—å–Ω—ã–µ –º–µ—Å—è—Ü—ã –¥–ª—è –∫—Ä–∏–ø—Ç–æ
        strong_months = [1, 2, 10, 11, 12]  # –Ø–Ω–≤–∞—Ä—å, —Ñ–µ–≤—Ä–∞–ª—å, –æ–∫—Ç—è–±—Ä—å-–¥–µ–∫–∞–±—Ä—å
        weak_months = [6, 7, 8, 9]  # –õ–µ—Ç–Ω–∏–µ –º–µ—Å—è—Ü—ã
        
        if current_month in strong_months:
            return 1.2  # +20% –∫ —Å–∏–≥–Ω–∞–ª—É
        elif current_month in weak_months:
            return 0.8  # -20% –∫ —Å–∏–≥–Ω–∞–ª—É
        else:
            return 1.0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
    
    def prepare_data(self, df: pd.DataFrame) -> pd.DataFrame:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
        df = df.copy()
        
        # –ë–∞–∑–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df['rsi'] = self.indicators.rsi(df['close'])
        df['ema_10'] = self.indicators.ema(df['close'], 10)
        df['ema_30'] = self.indicators.ema(df['close'], 30)
        df['ema_50'] = self.indicators.ema(df['close'], 50)
        
        # MACD –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        df['macd'], df['macd_signal'], df['macd_hist'] = self.indicators.macd(df['close'])
        
        # Bollinger Bands
        df['bb_upper'], df['bb_middle'], df['bb_lower'] = self.indicators.bollinger_bands(df['close'])
        
        # ATR –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–ø–æ–≤
        df['atr'] = self.indicators.atr(df['high'], df['low'], df['close'])
        
        # –û–±—ä–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        df['volume_sma'] = self.indicators.sma(df['volume'], 20)
        df['volume_spike'] = df['volume'] > (df['volume_sma'] * 1.5)
        
        # Momentum
        df['momentum'] = df['close'].pct_change(10)
        
        return df
    
    def get_risk_multiplier(self) -> float:
        """–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        multipliers = {
            'LOW': 0.5,    # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            'MEDIUM': 1.0,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
            'HIGH': 1.5    # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π
        }
        return multipliers.get(self.risk_level, 1.0)
    
    def generate_signals(self, df: pd.DataFrame, symbol: str = 'UNKNOWN') -> List[TradeSignal]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–º–∏–Ω–∞—Ü–∏–∏ –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏"""
        
        signals = []
        df = self.prepare_data(df)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ BTC –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (–µ—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ BTC)
        btc_correlation = 0.5
        if symbol != 'BTCUSDT' and symbol != 'UNKNOWN':
            try:
                from data_provider import DataProvider
                provider = DataProvider()
                btc_data = provider.get_binance_data('BTCUSDT', '1h', len(df))
                if not btc_data.empty:
                    self.btc_data = btc_data
                    btc_correlation = self.calculate_correlation_with_btc(df, btc_data)
            except:
                pass
        
        # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
        sentiment = self.analyze_market_sentiment(df)
        
        # –°–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
        seasonal_factor = self.get_seasonal_factor()
        
        # –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∏—Å–∫–∞
        risk_multiplier = self.get_risk_multiplier()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        for i in range(50, len(df)):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 50-–π —Å–≤–µ—á–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            current = df.iloc[i]
            previous = df.iloc[i-1]
            
            if pd.isna(current['rsi']) or pd.isna(current['ema_30']):
                continue
            
            # === –£–°–õ–û–í–ò–Ø –î–õ–Ø –ü–û–ö–£–ü–ö–ò ===
            
            # 1. –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
            rsi_oversold = current['rsi'] < 35
            price_above_ema = current['close'] > current['ema_10']
            macd_bullish = current['macd'] > current['macd_signal']
            volume_confirm = current['volume_spike']
            
            # 2. –£—Å–ª–æ–≤–∏—è –¥–æ–º–∏–Ω–∞—Ü–∏–∏ (–¥–ª—è –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤)
            dominance_favorable = True
            if symbol != 'BTCUSDT':
                # –î–ª—è –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤: –ø–æ–∫—É–ø–∞–µ–º –∫–æ–≥–¥–∞ –¥–æ–º–∏–Ω–∞—Ü–∏—è BTC —Å–Ω–∏–∂–∞–µ—Ç—Å—è
                dominance_favorable = sentiment.btc_dominance < 45.0
                
                # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
                if btc_correlation > 0.7:  # –í—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å BTC
                    # –ù—É–∂–µ–Ω —Å–∏–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
                    dominance_favorable = dominance_favorable and sentiment.market_trend == 'BULL'
            
            # 3. –°–µ–Ω—Ç–∏–º–µ–Ω—Ç –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
            sentiment_bullish = (sentiment.fear_greed_index < 40 or  # –ü–æ–∫—É–ø–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞—Ö–µ
                               sentiment.market_trend == 'BULL')
            
            seasonal_bullish = seasonal_factor >= 1.0
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Bollinger Bands
            price_near_support = current['close'] <= current['bb_middle']
            
            # === –°–ò–ì–ù–ê–õ –ù–ê –ü–û–ö–£–ü–ö–£ ===
            if (rsi_oversold and macd_bullish and dominance_favorable and 
                sentiment_bullish and seasonal_bullish and price_near_support and volume_confirm):
                
                # –†–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–∞
                atr_multiplier = risk_multiplier * 2.0
                stop_loss = current['close'] - (current['atr'] * atr_multiplier)
                take_profit = current['close'] + (current['atr'] * atr_multiplier * 2)
                
                # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
                confidence_factors = [
                    0.2 if dominance_favorable else 0.0,
                    0.2 if volume_confirm else 0.0,
                    0.2 if sentiment_bullish else 0.0,
                    0.2 if seasonal_bullish else 0.0,
                    0.2 if btc_correlation < 0.8 else 0.1  # –õ—É—á—à–µ –Ω–∏–∑–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –¥–ª—è –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤
                ]
                confidence = sum(confidence_factors)
                
                # –ü—Ä–∏—á–∏–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞
                reason_parts = []
                if dominance_favorable:
                    reason_parts.append(f"BTC dom: {sentiment.btc_dominance:.1f}%")
                if sentiment.market_trend == 'BULL':
                    reason_parts.append("Bull trend")
                if btc_correlation < 0.5:
                    reason_parts.append("Low BTC corr")
                if seasonal_bullish:
                    reason_parts.append("Seasonal+")
                
                reason = f"DOM Strategy: {', '.join(reason_parts)}"
                
                signals.append(TradeSignal(
                    timestamp=current.name,
                    action='BUY',
                    price=current['close'],
                    confidence=min(confidence, 0.95),
                    strategy=self.name,
                    stop_loss=stop_loss,
                    take_profit=take_profit,
                    reason=reason
                ))
            
            # === –£–°–õ–û–í–ò–Ø –î–õ–Ø –ü–†–û–î–ê–ñ–ò ===
            
            rsi_overbought = current['rsi'] > 65
            price_below_ema = current['close'] < current['ema_10']
            macd_bearish = current['macd'] < current['macd_signal']
            
            # –î–ª—è –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤: –ø—Ä–æ–¥–∞–µ–º –∫–æ–≥–¥–∞ –¥–æ–º–∏–Ω–∞—Ü–∏—è BTC —Ä–∞—Å—Ç–µ—Ç
            dominance_bearish = True
            if symbol != 'BTCUSDT':
                dominance_bearish = sentiment.btc_dominance > 50.0
            
            sentiment_bearish = (sentiment.fear_greed_index > 75 or  # –ü—Ä–æ–¥–∞–µ–º –Ω–∞ –∂–∞–¥–Ω–æ—Å—Ç–∏
                               sentiment.market_trend == 'BEAR')
            
            price_near_resistance = current['close'] >= current['bb_upper']
            
            # === –°–ò–ì–ù–ê–õ –ù–ê –ü–†–û–î–ê–ñ–£ ===
            if (rsi_overbought and macd_bearish and dominance_bearish and 
                sentiment_bearish and price_near_resistance and volume_confirm):
                
                atr_multiplier = risk_multiplier * 2.0
                stop_loss = current['close'] + (current['atr'] * atr_multiplier)
                take_profit = current['close'] - (current['atr'] * atr_multiplier * 2)
                
                confidence_factors = [
                    0.2 if dominance_bearish else 0.0,
                    0.2 if volume_confirm else 0.0,
                    0.2 if sentiment_bearish else 0.0,
                    0.2 if price_near_resistance else 0.0,
                    0.2 if btc_correlation > 0.7 else 0.1  # –í—ã—Å–æ–∫–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø–ª–æ—Ö–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤
                ]
                confidence = sum(confidence_factors)
                
                reason_parts = []
                if dominance_bearish:
                    reason_parts.append(f"BTC dom: {sentiment.btc_dominance:.1f}%‚Üë")
                if sentiment.market_trend == 'BEAR':
                    reason_parts.append("Bear trend")
                if sentiment.fear_greed_index > 75:
                    reason_parts.append("Greed high")
                
                reason = f"DOM Strategy: {', '.join(reason_parts)}"
                
                signals.append(TradeSignal(
                    timestamp=current.name,
                    action='SELL',
                    price=current['close'],
                    confidence=min(confidence, 0.95),
                    strategy=self.name,
                    stop_loss=stop_loss,
                    take_profit=take_profit,
                    reason=reason
                ))
        
        return signals
    
    def get_strategy_info(self) -> Dict:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        return {
            'name': 'Bitcoin Dominance + Correlation',
            'description': '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–º–∏–Ω–∞—Ü–∏–∏ BTC –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π',
            'risk_level': self.risk_level,
            'features': [
                'üìä –ê–Ω–∞–ª–∏–∑ –¥–æ–º–∏–Ω–∞—Ü–∏–∏ Bitcoin',
                'üîó –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å BTC',
                'üìà –†—ã–Ω–æ—á–Ω—ã–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç',
                'üìÖ –°–µ–∑–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã',
                f'‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {self.risk_level}'
            ]
        }


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("üî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä—Å–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Bitcoin Dominance...")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ —Ä–∏—Å–∫–∞
    strategies = [
        DominanceCorrelationStrategy(risk_level='LOW'),
        DominanceCorrelationStrategy(risk_level='MEDIUM'),
        DominanceCorrelationStrategy(risk_level='HIGH')
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        from data_provider import DataProvider
        
        provider = DataProvider()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–æ–Ω–µ—Ç–∞—Ö
        test_symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT']
        
        for symbol in test_symbols:
            print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol}:")
            data = provider.get_binance_data(symbol, '1h', 200)
            
            if not data.empty:
                for strategy in strategies:
                    signals = strategy.generate_signals(data, symbol)
                    
                    if signals:
                        last_signal = signals[-1]
                        print(f"  {strategy.risk_level} —Ä–∏—Å–∫: {last_signal.action} "
                              f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {last_signal.confidence:.2%})")
                        print(f"    –ü—Ä–∏—á–∏–Ω–∞: {last_signal.reason}")
                    else:
                        print(f"  {strategy.risk_level} —Ä–∏—Å–∫: –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤")
            else:
                print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    
    except ImportError:
        print("‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω data_provider.py")
    
    print("\n‚úÖ –ê–≤—Ç–æ—Ä—Å–∫–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")