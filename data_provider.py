import pandas as pd
import numpy as np
import requests
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
import warnings
warnings.filterwarnings('ignore')

class DataProvider:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    def __init__(self):
        self.binance_base_url = "https://api.binance.com"
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API"""
        try:
            response = self.session.get(f"{self.binance_base_url}/api/v3/ping", timeout=10)
            return response.status_code == 200
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
            return False
    
    def get_binance_data(self, symbol: str, interval: str = '1h', limit: int = 500) -> pd.DataFrame:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'BTCUSDT')
            interval: –¢–∞–π–º—Ñ—Ä–µ–π–º ('1m', '5m', '15m', '1h', '4h', '1d')
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π (–º–∞–∫—Å–∏–º—É–º 1000)
        """
        try:
            # –û—á–∏—Å—Ç–∫–∞ —Å–∏–º–≤–æ–ª–∞
            symbol = symbol.replace('/', '').upper()
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            params = {
                'symbol': symbol,
                'interval': interval,
                'limit': min(limit, 1000)  # Binance –ª–∏–º–∏—Ç
            }
            
            # –ó–∞–ø—Ä–æ—Å –∫ API
            url = f"{self.binance_base_url}/api/v3/klines"
            response = self.session.get(url, params=params, timeout=30)
            
            if response.status_code != 200:
                print(f"–û—à–∏–±–∫–∞ API Binance: {response.status_code}")
                return pd.DataFrame()
            
            data = response.json()
            
            if not data:
                print(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return pd.DataFrame()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
            df = pd.DataFrame(data, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_asset_volume', 'number_of_trades',
                'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
            ])
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            numeric_columns = ['open', 'high', 'low', 'close', 'volume']
            for col in numeric_columns:
                df[col] = pd.to_numeric(df[col], errors='coerce')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df.set_index('timestamp', inplace=True)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            df = df[numeric_columns]
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            df.dropna(inplace=True)
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol} ({interval})")
            
            return df
            
        except requests.exceptions.Timeout:
            print(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
            return pd.DataFrame()
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return pd.DataFrame()
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            return pd.DataFrame()
    
    def get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        try:
            symbol = symbol.replace('/', '').upper()
            
            url = f"{self.binance_base_url}/api/v3/ticker/price"
            params = {'symbol': symbol}
            
            response = self.session.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                return float(data['price'])
            else:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {response.status_code}")
                return 0.0
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return 0.0
    
    def get_ticker_24h(self, symbol: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ 24-—á–∞—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            symbol = symbol.replace('/', '').upper()
            
            url = f"{self.binance_base_url}/api/v3/ticker/24hr"
            params = {'symbol': symbol}
            
            response = self.session.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {symbol}: {response.status_code}")
                return {}
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {symbol}: {e}")
            return {}
    
    def get_market_data(self, symbol: str, interval: str = '15m', limit: int = 200) -> pd.DataFrame:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return self.get_binance_data(symbol, interval, limit)
    
    def get_multiple_symbols_data(self, symbols: List[str], interval: str = '1h', 
                                 limit: int = 200) -> Dict[str, pd.DataFrame]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        results = {}
        
        for symbol in symbols:
            print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
            data = self.get_binance_data(symbol, interval, limit)
            
            if not data.empty:
                results[symbol] = data
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
        
        return results
    
    def get_btc_dominance(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–∏–Ω–∞—Ü–∏–∏ Bitcoin"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º CoinGecko API
            url = "https://api.coingecko.com/api/v3/global"
            response = self.session.get(url, timeout=15)
            
            if response.status_code == 200:
                data = response.json()
                dominance = data['data']['market_cap_percentage']['btc']
                return float(dominance)
            else:
                # Fallback –∑–Ω–∞—á–µ–Ω–∏–µ
                return 42.0
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∏–Ω–∞—Ü–∏–∏ BTC: {e}")
            return 42.0  # –°—Ä–µ–¥–Ω—è—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –¥–æ–º–∏–Ω–∞—Ü–∏—è
    
    def get_fear_greed_index(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏"""
        try:
            # Alternative API –¥–ª—è Fear & Greed –∏–Ω–¥–µ–∫—Å–∞
            url = "https://api.alternative.me/fng/"
            response = self.session.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data['data']:
                    return {
                        'value': int(data['data'][0]['value']),
                        'classification': data['data'][0]['value_classification'],
                        'timestamp': data['data'][0]['timestamp']
                    }
            
            # Fallback
            return {'value': 50, 'classification': 'Neutral', 'timestamp': str(int(time.time()))}
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Fear & Greed –∏–Ω–¥–µ–∫—Å–∞: {e}")
            return {'value': 50, 'classification': 'Neutral', 'timestamp': str(int(time.time()))}
    
    def validate_symbol(self, symbol: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
        try:
            symbol = symbol.replace('/', '').upper()
            
            url = f"{self.binance_base_url}/api/v3/exchangeInfo"
            response = self.session.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                symbols = [s['symbol'] for s in data['symbols']]
                return symbol in symbols
            
            return False
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
            return False
    
    def get_available_symbols(self, quote_asset: str = 'USDT') -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        try:
            url = f"{self.binance_base_url}/api/v3/exchangeInfo"
            response = self.session.get(url, timeout=15)
            
            if response.status_code == 200:
                data = response.json()
                symbols = []
                
                for symbol_info in data['symbols']:
                    if (symbol_info['status'] == 'TRADING' and 
                        symbol_info['quoteAsset'] == quote_asset):
                        symbols.append(symbol_info['symbol'])
                
                return sorted(symbols)
            
            return []
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return []
    
    def get_top_volume_symbols(self, quote_asset: str = 'USDT', limit: int = 50) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ –æ–±—ä–µ–º—É —Ç–æ—Ä–≥–æ–≤"""
        try:
            url = f"{self.binance_base_url}/api/v3/ticker/24hr"
            response = self.session.get(url, timeout=15)
            
            if response.status_code == 200:
                data = response.json()
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ quote asset –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—ä–µ–º—É
                filtered_data = [
                    item for item in data 
                    if item['symbol'].endswith(quote_asset) and float(item['quoteVolume']) > 0
                ]
                
                sorted_data = sorted(filtered_data, key=lambda x: float(x['quoteVolume']), reverse=True)
                
                return [item['symbol'] for item in sorted_data[:limit]]
            
            return []
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return []
    
    def create_sample_data(self, symbol: str = 'BTCUSDT', days: int = 30) -> pd.DataFrame:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"""
        print(f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ
        np.random.seed(42)
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        end_time = datetime.now()
        start_time = end_time - timedelta(days=days)
        timestamps = pd.date_range(start_time, end_time, freq='1H')
        
        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –¥–ª—è BTC)
        base_price = 50000 if 'BTC' in symbol else 2000
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω —Å —Å–ª—É—á–∞–π–Ω—ã–º –±–ª—É–∂–¥–∞–Ω–∏–µ–º
        prices = [base_price]
        for _ in range(len(timestamps) - 1):
            change = np.random.normal(0, 0.02)  # 2% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            new_price = prices[-1] * (1 + change)
            prices.append(max(new_price, base_price * 0.5))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        
        # –°–æ–∑–¥–∞–Ω–∏–µ OHLC –¥–∞–Ω–Ω—ã—Ö
        df_data = []
        for i, (timestamp, close) in enumerate(zip(timestamps, prices)):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º high, low, open –Ω–∞ –æ—Å–Ω–æ–≤–µ close
            volatility = abs(np.random.normal(0, 0.01))
            high = close * (1 + volatility)
            low = close * (1 - volatility)
            open_price = prices[i-1] if i > 0 else close
            
            # –û–±—ä–µ–º
            volume = np.random.randint(100, 10000)
            
            df_data.append({
                'open': open_price,
                'high': high,
                'low': low,
                'close': close,
                'volume': volume
            })
        
        df = pd.DataFrame(df_data, index=timestamps)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(df)} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–≤–µ—á–µ–π")
        return df


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    provider = DataProvider()
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if provider.test_connection():
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        
        test_symbols = ['BTCUSDT', 'ETHUSDT']
        
        for symbol in test_symbols:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {symbol}:")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            data = provider.get_binance_data(symbol, '1h', 100)
            if not data.empty:
                print(f"  ‚úÖ OHLCV –¥–∞–Ω–Ω—ã–µ: {len(data)} —Å–≤–µ—á–µ–π")
                print(f"  üìà –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: ${data['low'].min():.2f} - ${data['high'].max():.2f}")
                print(f"  üìä –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${data['close'].iloc[-1]:.2f}")
            
            # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            current_price = provider.get_current_price(symbol)
            if current_price > 0:
                print(f"  üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")
            
            # 24h —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            ticker = provider.get_ticker_24h(symbol)
            if ticker:
                change = float(ticker.get('priceChangePercent', 0))
                print(f"  üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {change:+.2f}%")
            
            time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        # –¢–µ—Å—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print(f"\nüåç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        
        btc_dominance = provider.get_btc_dominance()
        print(f"  üìä –î–æ–º–∏–Ω–∞—Ü–∏—è BTC: {btc_dominance:.1f}%")
        
        fear_greed = provider.get_fear_greed_index()
        print(f"  üò® Fear & Greed: {fear_greed['value']} ({fear_greed['classification']})")
        
        # –¢–æ–ø —Å–∏–º–≤–æ–ª—ã –ø–æ –æ–±—ä–µ–º—É
        top_symbols = provider.get_top_volume_symbols(limit=10)
        if top_symbols:
            print(f"  üî• –¢–æ–ø-10 –ø–æ –æ–±—ä–µ–º—É: {', '.join(top_symbols[:5])}...")
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Binance API")
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = provider.create_sample_data('BTCUSDT', 7)
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã: {len(test_data)} –∑–∞–ø–∏—Å–µ–π")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")