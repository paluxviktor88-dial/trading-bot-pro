import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import time
from datetime import datetime, timedelta
from typing import Dict, List, Tuple

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from data_provider import DataProvider
    from strategies import TradingStrategies
    from indicators import TechnicalIndicators
    from dominance_strategy import DominanceCorrelationStrategy
    from backtester import Backtester
    from position_tracker import PositionTracker
    st.success("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    st.stop()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üöÄ Trading Bot Pro - 15 Coins",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    
    .signal-card {
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        border-left: 5px solid;
    }
    
    .signal-strong-buy {
        background: linear-gradient(135deg, #00c851 0%, #007e33 100%);
        border-left-color: #00ff00;
        color: white;
    }
    
    .signal-buy {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        border-left-color: #28a745;
        color: white;
    }
    
    .signal-strong-sell {
        background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
        border-left-color: #ff0000;
        color: white;
    }
    
    .signal-sell {
        background: linear-gradient(135deg, #fd7e14 0%, #e83e8c 100%);
        border-left-color: #fd7e14;
        color: white;
    }
    
    .signal-hold {
        background: linear-gradient(135deg, #6c757d 0%, #adb5bd 100%);
        border-left-color: #6c757d;
        color: white;
    }
    
    .risk-levels {
        background: rgba(255,255,255,0.1);
        padding: 0.5rem;
        border-radius: 5px;
        margin-top: 0.5rem;
        font-size: 0.85rem;
    }
</style>
""", unsafe_allow_html=True)

class EnhancedTradingDashboard:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥ —Å —Ç—Ä–µ–∫–µ—Ä–æ–º –ø–æ–∑–∏—Ü–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
    
    def __init__(self):
        self.data_provider = DataProvider()
        self.strategies = TradingStrategies()
        self.indicators = TechnicalIndicators()
        self.backtester = Backtester(initial_balance=10000)
        self.position_tracker = PositionTracker()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (15 –º–æ–Ω–µ—Ç)
        self.available_symbols = [
            'BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'XRP/USDT',
            'ADA/USDT', 'DOGE/USDT', 'SOL/USDT', 'AVAX/USDT',
            'DOT/USDT', 'LINK/USDT', 'UNI/USDT', 'LTC/USDT',
            'BCH/USDT', 'ATOM/USDT', 'ALGO/USDT'
        ]

        # –ù–∞–∑–≤–∞–Ω–∏—è –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.symbol_names = {
            'BTC/USDT': '‚Çø Bitcoin',
            'ETH/USDT': 'Œû Ethereum', 
            'BNB/USDT': 'üî∏ Binance Coin',
            'XRP/USDT': '∆¶ Ripple',
            'ADA/USDT': '‚Ç≥ Cardano',
            'DOGE/USDT': 'üêï Dogecoin',
            'SOL/USDT': '‚óé Solana',
            'AVAX/USDT': 'üî∫ Avalanche',
            'DOT/USDT': '‚óè Polkadot',
            'LINK/USDT': 'üîó Chainlink',
            'UNI/USDT': 'ü¶Ñ Uniswap',
            'LTC/USDT': 'üî∑ Litecoin',
            'BCH/USDT': 'üü† Bitcoin Cash',
            'ATOM/USDT': '‚ö™ Cosmos',
            'ALGO/USDT': 'üîµ Algorand'
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if 'monitoring_active' not in st.session_state:
            st.session_state.monitoring_active = False
        if 'monitored_symbols' not in st.session_state:
            st.session_state.monitored_symbols = ['BTC/USDT', 'ETH/USDT', 'SOL/USDT']
        if 'update_interval' not in st.session_state:
            st.session_state.update_interval = 30  # 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if 'selected_strategies' not in st.session_state:
            st.session_state.selected_strategies = ['mean_reversion', 'trend_following', 'breakout']
        if 'last_update_time' not in st.session_state:
            st.session_state.last_update_time = 0
        if 'quick_entry_data' not in st.session_state:
            st.session_state.quick_entry_data = None
        if 'analysis_results' not in st.session_state:
            st.session_state.analysis_results = []
        if 'min_signal_confidence' not in st.session_state:
            st.session_state.min_signal_confidence = 68  # –ù–û–í–´–ô –§–ò–õ–¨–¢–†
    
    def get_available_strategies(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        return {
            'mean_reversion': {
                'name': 'üéØ Mean Reversion',
                'description': '–ü–æ–∫—É–ø–∫–∞ –Ω–∞ –æ—Ç—Å–∫–æ–∫–∞—Ö –æ—Ç —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤',
                'details': 'RSI + Bollinger Bands –¥–ª—è —Ç–æ—á–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤'
            },
            'trend_following': {
                'name': 'üìà Trend Following',
                'description': '–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞ —Ç—Ä–µ–Ω–¥–æ–º',
                'details': 'EMA + MACD + ADX –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
            },
            'breakout': {
                'name': 'üöÄ Volatility Breakout',
                'description': '–¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –ø—Ä–æ–±–æ—è—Ö –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏',
                'details': 'Bollinger Squeeze + Volume Spike'
            },
            'scalping': {
                'name': '‚ö° Scalping',
                'description': '–ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö',
                'details': 'Fast EMA + RSI –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞'
            },
            'momentum': {
                'name': 'üî• Momentum',
                'description': '–¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ —Å–∏–ª—å–Ω—ã—Ö –∏–º–ø—É–ª—å—Å–∞—Ö',
                'details': 'Momentum –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä + Volume'
            }
        }
    
    def classify_signal_strength(self, confidence: float, strategy_name: str) -> Tuple[str, str, str]:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞"""
        
        if confidence >= 75:
            return "–°–ò–õ–¨–ù–´–ô", "üü¢", "risk-high"
        elif confidence >= 60:
            return "–°–†–ï–î–ù–ò–ô", "üü°", "risk-medium"
        else:
            return "–°–õ–ê–ë–´–ô", "‚ö™", "risk-low"
    
    def calculate_signal_levels(self, price: float, direction: str, strategy: str) -> Dict:
        """–†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞"""
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        risk_params = {
            'mean_reversion': {'stop_pct': 2.5, 'tp_pct': 5.0},     # 1:2
            'trend_following': {'stop_pct': 3.0, 'tp_pct': 9.0},   # 1:3
            'breakout': {'stop_pct': 2.0, 'tp_pct': 6.0},          # 1:3
            'scalping': {'stop_pct': 1.5, 'tp_pct': 3.0},          # 1:2
            'momentum': {'stop_pct': 3.5, 'tp_pct': 7.0},          # 1:2
            'manual': {'stop_pct': 3.0, 'tp_pct': 6.0}             # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        
        params = risk_params.get(strategy, risk_params['manual'])
        
        if direction == 'LONG' or direction == 'BUY':
            stop_loss = price * (1 - params['stop_pct'] / 100)
            take_profit = price * (1 + params['tp_pct'] / 100)
        else:  # SHORT –∏–ª–∏ SELL
            stop_loss = price * (1 + params['stop_pct'] / 100)
            take_profit = price * (1 - params['tp_pct'] / 100)
        
        risk_reward = params['tp_pct'] / params['stop_pct']
        
        return {
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'stop_pct': params['stop_pct'],
            'tp_pct': params['tp_pct'],
            'risk_reward': risk_reward
        }
    
    def analyze_symbol_enhanced(self, symbol: str, timeframe: str = '15m') -> Dict:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–∏–º–≤–æ–ª–∞ –≤—Å–µ–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = self.data_provider.get_market_data(symbol, interval=timeframe, limit=200)
        
        if data is None or data.empty:
            return {'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}'}
        
        # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        current_price = data['close'].iloc[-1]
        price_change_24h = ((current_price / data['close'].iloc[-24]) - 1) * 100 if len(data) >= 24 else 0
        
        # –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
        market_conditions = self.strategies.analyze_market_conditions(data)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        all_signals = self.strategies.combine_signals(data, st.session_state.selected_strategies)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ —Å–∏–≥–Ω–∞–ª—ã)
        recent_signals = []
        if all_signals:
            cutoff_time = data.index[-1] - timedelta(hours=6)
            for signal in all_signals:
                signal_time = signal['timestamp']
                if isinstance(signal_time, str):
                    signal_time = pd.to_datetime(signal_time)
                elif hasattr(signal_time, 'tz_localize'):
                    signal_time = signal_time.tz_localize(None) if signal_time.tz else signal_time
                
                if signal_time >= cutoff_time:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏ –∫ –∫–∞–∂–¥–æ–º—É —Å–∏–≥–Ω–∞–ª—É
                    direction = signal['type']
                    strategy = signal.get('strategy', 'manual')
                    levels = self.calculate_signal_levels(signal['price'], direction, strategy)
                    
                    signal['recommended_stop_loss'] = levels['stop_loss']
                    signal['recommended_take_profit'] = levels['take_profit']
                    signal['risk_reward_ratio'] = levels['risk_reward']
                    signal['stop_pct'] = levels['stop_pct']
                    signal['tp_pct'] = levels['tp_pct']
                    
                    recent_signals.append(signal)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        buy_signals = len([s for s in recent_signals if s['type'] == 'BUY'])
        sell_signals = len([s for s in recent_signals if s['type'] == 'SELL'])
        
        if buy_signals > sell_signals * 1.5:
            consensus = 'BUY'
            consensus_strength = (buy_signals / (buy_signals + sell_signals)) * 100 if (buy_signals + sell_signals) > 0 else 0
        elif sell_signals > buy_signals * 1.5:
            consensus = 'SELL'
            consensus_strength = (sell_signals / (buy_signals + sell_signals)) * 100 if (buy_signals + sell_signals) > 0 else 0
        else:
            consensus = 'HOLD'
            consensus_strength = 50
        
        # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        avg_confidence = np.mean([s.get('confidence', 50) for s in recent_signals]) if recent_signals else 0
        
        return {
            'symbol': symbol,
            'current_price': current_price,
            'price_change_24h': price_change_24h,
            'data': data,
            'market_conditions': market_conditions,
            'signals': recent_signals,
            'consensus': consensus,
            'consensus_strength': consensus_strength,
            'avg_confidence': avg_confidence,
            'active_signals': len(recent_signals),
            'buy_signals': buy_signals,
            'sell_signals': sell_signals
        }
    
    def group_signals_by_symbol(self, analysis_results: List[Dict]) -> Dict:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª–∞–º - –æ–¥–∏–Ω –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –º–æ–Ω–µ—Ç—É –° –§–ò–õ–¨–¢–†–û–ú 68%+"""
        
        grouped_signals = {}
        
        for result in analysis_results:
            if 'error' not in result and result['signals']:
                symbol = result['symbol']
                symbol_name = self.symbol_names.get(symbol, symbol)
                
                # –§–ò–õ–¨–¢–†–£–ï–ú –°–ò–ì–ù–ê–õ–´ –ü–û –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ô –£–í–ï–†–ï–ù–ù–û–°–¢–ò
                qualified_signals = [
                    signal for signal in result['signals'] 
                    if signal.get('confidence', 0) >= st.session_state.min_signal_confidence
                ]
                
                if not qualified_signals:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –Ω—É–∂–Ω–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
                
                # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª —Å—Ä–µ–¥–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                best_signal = None
                best_confidence = 0
                
                for signal in qualified_signals:
                    confidence = signal.get('confidence', 0)
                    if confidence > best_confidence:
                        best_confidence = confidence
                        best_signal = signal
                
                if best_signal:
                    strength, color, css_class = self.classify_signal_strength(
                        best_signal.get('confidence', 50), best_signal.get('strategy', 'unknown'))
                    
                    grouped_signals[symbol] = {
                        'symbol': symbol,
                        'symbol_name': symbol_name,
                        'strategy': best_signal.get('strategy', 'unknown'),
                        'action': best_signal['type'],
                        'strength': strength,
                        'color': color,
                        'css_class': css_class,
                        'confidence': best_signal.get('confidence', 50),
                        'price': best_signal['price'],
                        'current_price': result['current_price'],
                        'reason': best_signal.get('reason', 'Signal detected'),
                        'timestamp': best_signal['timestamp'],
                        'consensus': result['consensus'],
                        'total_signals': len(result['signals']),
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º
                        'recommended_stop_loss': best_signal.get('recommended_stop_loss'),
                        'recommended_take_profit': best_signal.get('recommended_take_profit'),
                        'risk_reward_ratio': best_signal.get('risk_reward_ratio'),
                        'stop_pct': best_signal.get('stop_pct'),
                        'tp_pct': best_signal.get('tp_pct')
                    }
        
        return grouped_signals
    
    def render_enhanced_controls(self):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        
        st.sidebar.markdown("""
        <div class="main-header">
            <h2>üöÄ Trading Bot Pro</h2>
            <p>15 –º–æ–Ω–µ—Ç ‚Ä¢ 5 —Å—Ç—Ä–∞—Ç–µ–≥–∏–π ‚Ä¢ –¢—Ä–µ–∫–µ—Ä –ø–æ–∑–∏—Ü–∏–π</p>
        </div>
        """, unsafe_allow_html=True)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        st.sidebar.header("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        
        col1, col2 = st.sidebar.columns(2)
        
        with col1:
            if st.button("‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç" if not st.session_state.monitoring_active else "‚è∏Ô∏è –°—Ç–æ–ø", key="monitoring_toggle"):
                st.session_state.monitoring_active = not st.session_state.monitoring_active
                if not st.session_state.monitoring_active:
                    st.sidebar.info("‚è∏Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        with col2:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", key="manual_refresh"):
                st.session_state.last_update_time = 0  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                st.rerun()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        st.session_state.update_interval = st.sidebar.selectbox(
            "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
            [10, 30, 60, 120, 300],
            index=1,  # 30 —Å–µ–∫—É–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            format_func=lambda x: f"{x} —Å–µ–∫" if x < 60 else f"{x//60} –º–∏–Ω"
        )
        
        # –ù–û–í–´–ô –§–ò–õ–¨–¢–† –ü–û –£–í–ï–†–ï–ù–ù–û–°–¢–ò –°–ò–ì–ù–ê–õ–û–í
        st.sidebar.header("üéØ –§–∏–ª—å—Ç—Ä —Å–∏–≥–Ω–∞–ª–æ–≤")
        st.session_state.min_signal_confidence = st.sidebar.slider(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞:",
            min_value=50,
            max_value=95,
            value=68,
            step=5,
            help="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª—ã —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –≤—ã—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞"
        )
        
        # –í—ã–±–æ—Ä –º–æ–Ω–µ—Ç
        st.sidebar.header("üíé –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
        
        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
        col1, col2, col3 = st.sidebar.columns(3)
        with col1:
            if st.button("–¢–æ–ø-3", key="select_top3"):
                st.session_state.monitored_symbols = ['BTC/USDT', 'ETH/USDT', 'SOL/USDT']
        with col2:
            if st.button("–¢–æ–ø-6", key="select_top6"):
                st.session_state.monitored_symbols = self.available_symbols[:6]
        with col3:
            if st.button("–í—Å–µ 15", key="select_all"):
                st.session_state.monitored_symbols = self.available_symbols
        
        st.session_state.monitored_symbols = st.sidebar.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—ã:",
            self.available_symbols,
            default=st.session_state.monitored_symbols,
            format_func=lambda x: self.symbol_names.get(x, x)
        )
        
        # –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        st.sidebar.header("ü§ñ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        available_strategies = self.get_available_strategies()
        
        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        col1, col2 = st.sidebar.columns(2)
        with col1:
            if st.button("–ë–∞–∑–æ–≤—ã–µ", key="select_basic"):
                st.session_state.selected_strategies = ['mean_reversion', 'trend_following', 'breakout']
        with col2:
            if st.button("–í—Å–µ", key="select_all_strategies"):
                st.session_state.selected_strategies = list(available_strategies.keys())
        
        selected_strategy_names = []
        for key, info in available_strategies.items():
            if st.sidebar.checkbox(info['name'], value=key in st.session_state.selected_strategies, key=f"strat_{key}"):
                if key not in selected_strategy_names:
                    selected_strategy_names.append(key)
        
        st.session_state.selected_strategies = selected_strategy_names
        
        # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        try:
            summary = self.position_tracker.get_position_summary()
            if summary['active_positions'] > 0:
                st.sidebar.header("üìä –í–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏")
                st.sidebar.success(f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {summary['active_positions']}")
                if summary['total_unrealized_pnl_pct'] != 0:
                    pnl_color = "üü¢" if summary['total_unrealized_pnl_pct'] > 0 else "üî¥"
                    st.sidebar.info(f"{pnl_color} P&L: {summary['total_unrealized_pnl_pct']:+.2f}%")
                if summary['alerts_count'] > 0:
                    st.sidebar.warning(f"üö® –ê–ª–µ—Ä—Ç–æ–≤: {summary['alerts_count']}")
        except Exception as e:
            st.sidebar.error(f"–û—à–∏–±–∫–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
        
        # –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if st.session_state.monitoring_active:
            st.sidebar.success(f"üü¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {len(st.session_state.monitored_symbols)} –º–æ–Ω–µ—Ç")
            st.sidebar.info(f"üéØ –§–∏–ª—å—Ç—Ä: {st.session_state.min_signal_confidence}%+")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            time_since_update = time.time() - st.session_state.last_update_time
            time_to_next = max(0, st.session_state.update_interval - time_since_update)
            if time_to_next > 0:
                st.sidebar.info(f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {int(time_to_next)} —Å–µ–∫")
        else:
            st.sidebar.warning("üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def render_alerts_panel(self, analysis_results: List[Dict]):
        """–ü–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø"""
        
        st.markdown("## üö® –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ —Å–∏–º–≤–æ–ª–∞–º (–æ–¥–∏–Ω –ª—É—á—à–∏–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –º–æ–Ω–µ—Ç—É)
        grouped_signals = self.group_signals_by_symbol(analysis_results)
        
        if grouped_signals:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞
            st.info(f"üéØ –ü–æ–∫–∞–∑–∞–Ω—ã —Å–∏–≥–Ω–∞–ª—ã —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {st.session_state.min_signal_confidence}%+ ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: {len(grouped_signals)} –º–æ–Ω–µ—Ç")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            sorted_signals = sorted(grouped_signals.values(), key=lambda x: x['confidence'], reverse=True)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
            cols = st.columns(min(len(sorted_signals), 3))
            
            for i, alert in enumerate(sorted_signals[:9]):  # –ú–∞–∫—Å–∏–º—É–º 9 –∞–ª–µ—Ä—Ç–æ–≤
                with cols[i % 3]:
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –∫–∞—Ä—Ç–æ—á–∫–∏
                    if alert['strength'] == '–°–ò–õ–¨–ù–´–ô' and alert['action'] == 'BUY':
                        card_class = "signal-strong-buy"
                    elif alert['strength'] == '–°–ò–õ–¨–ù–´–ô' and alert['action'] == 'SELL':
                        card_class = "signal-strong-sell"
                    elif alert['action'] == 'BUY':
                        card_class = "signal-buy"
                    elif alert['action'] == 'SELL':
                        card_class = "signal-sell"
                    else:
                        card_class = "signal-hold"
                    
                    price_change = ((alert['current_price'] - alert['price']) / alert['price']) * 100
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    strategy_info = self.get_available_strategies().get(alert['strategy'], {})
                    strategy_name = strategy_info.get('name', alert['strategy'])
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å–∏–≥–Ω–∞–ª–∞ –ë–ï–ó HTML
                    st.markdown(f"""
                    <div class="signal-card {card_class}">
                        <h4>{alert['color']} {alert['symbol_name']}</h4>
                        <p><strong>{alert['action']}</strong> ‚Ä¢ {strategy_name}</p>
                        <p>üí™ {alert['strength']} ({alert['confidence']:.0f}%)</p>
                        <p>üí∞ ${alert['current_price']:.4f} ({price_change:+.2f}%)</p>
                        <small>{alert['reason']}</small>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –û–¢–î–ï–õ–¨–ù–û —á–µ—Ä–µ–∑ st.info()
                    if alert.get('recommended_stop_loss') and alert.get('recommended_take_profit'):
                        st.info(f"""
üõ°Ô∏è **–°—Ç–æ–ø:** ${alert['recommended_stop_loss']:.4f} (-{alert['stop_pct']:.1f}%)  
üéØ **–ü—Ä–æ—Ñ–∏—Ç:** ${alert['recommended_take_profit']:.4f} (+{alert['tp_pct']:.1f}%)  
‚öñÔ∏è **R/R:** 1:{alert['risk_reward_ratio']:.1f}
""")
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
                    if st.button(f"üìà –í–æ–π—Ç–∏ –≤ –ø–æ–∑–∏—Ü–∏—é", key=f"enter_{alert['symbol']}_{i}", use_container_width=True):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞
                        st.session_state.quick_entry_data = {
                            'symbol': alert['symbol'],
                            'direction': 'LONG' if alert['action'] == 'BUY' else 'SHORT',
                            'price': alert['current_price'],
                            'strategy': alert['strategy'],
                            'confidence': alert['confidence'],
                            'recommended_stop_loss': alert.get('recommended_stop_loss'),
                            'recommended_take_profit': alert.get('recommended_take_profit'),
                            'symbol_name': alert['symbol_name']
                        }
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ü–æ–∑–∏—Ü–∏–∏' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Ö–æ–¥–∞.")
                        
        else:
            st.info(f"üî≠ –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {st.session_state.min_signal_confidence}%+ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∏–∑–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç/—Å—Ç—Ä–∞—Ç–µ–≥–∏–π.")
    
    def render_overview_table(self, analysis_results: List[Dict]):
        """–û–±–∑–æ—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –º–æ–Ω–µ—Ç"""
        
        st.markdown("## üìä –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        table_data = []
        
        for result in analysis_results:
            if 'error' not in result:
                symbol_name = self.symbol_names.get(result['symbol'], result['symbol'])
                
                # –ö–æ–Ω—Å–µ–Ω—Å—É—Å
                consensus_emoji = {'BUY': 'üü¢', 'SELL': 'üî¥', 'HOLD': 'üü°'}
                consensus_text = f"{consensus_emoji[result['consensus']]} {result['consensus']}"
                
                # –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                market = result.get('market_conditions', {})
                trend = market.get('trend', 'N/A')
                volatility = market.get('volatility', 'N/A')
                
                table_data.append({
                    '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞': symbol_name,
                    '–¶–µ–Ω–∞': f"${result['current_price']:.4f}",
                    '–ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á': f"{result['price_change_24h']:+.2f}%",
                    '–¢—Ä–µ–Ω–¥': trend,
                    '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å': volatility,
                    '–ö–æ–Ω—Å–µ–Ω—Å—É—Å': consensus_text,
                    '–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞': f"{result['consensus_strength']:.0f}%",
                    '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤': result['active_signals'],
                    'Buy/Sell': f"{result['buy_signals']}/{result['sell_signals']}"
                })
        
        if table_data:
            df = pd.DataFrame(table_data)
            st.dataframe(df, use_container_width=True, hide_index=True)
            
            # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                avg_change = np.mean([r['price_change_24h'] for r in analysis_results if 'error' not in r])
                st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–æ—Å—Ç 24—á", f"{avg_change:+.2f}%")
            
            with col2:
                total_buy = sum(r['buy_signals'] for r in analysis_results if 'error' not in r)
                st.metric("–í—Å–µ–≥–æ BUY —Å–∏–≥–Ω–∞–ª–æ–≤", total_buy)
            
            with col3:
                total_sell = sum(r['sell_signals'] for r in analysis_results if 'error' not in r)
                st.metric("–í—Å–µ–≥–æ SELL —Å–∏–≥–Ω–∞–ª–æ–≤", total_sell)
            
            with col4:
                total_active = sum(r['active_signals'] for r in analysis_results if 'error' not in r)
                st.metric("–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö", total_active)
    
    def render_positions_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        
        st.markdown("## üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        active_positions = self.position_tracker.get_active_positions()
        if active_positions:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
            current_prices = {}
            for position in active_positions:
                symbol_clean = position.symbol.replace('/', '')
                try:
                    price = self.data_provider.get_current_price(symbol_clean)
                    if price > 0:
                        current_prices[symbol_clean] = price
                except:
                    pass
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
            if current_prices:
                self.position_tracker.update_position_prices(current_prices)
        
        # –°–≤–æ–¥–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        try:
            summary = self.position_tracker.get_position_summary()
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π", summary['active_positions'])
            with col2:
                st.metric("–ó–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π", summary['closed_positions'])
            with col3:
                pnl_color = "normal"
                if summary['total_unrealized_pnl_pct'] > 0:
                    pnl_color = "inverse"
                st.metric("–û–±—â–∏–π P&L", f"{summary['total_unrealized_pnl_pct']:+.2f}%", delta_color=pnl_color)
            with col4:
                st.metric("–ê–ª–µ—Ä—Ç–æ–≤", summary['alerts_count'])
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
        
        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
        pos_tab1, pos_tab2, pos_tab3 = st.tabs(["‚ûï –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è", "üìà –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏", "üìä –ò—Å—Ç–æ—Ä–∏—è"])
        
        with pos_tab1:
            self.render_add_position_form()
        
        with pos_tab2:
            self.render_active_positions()
        
        with pos_tab3:
            self.render_positions_history()
    
    def render_add_position_form(self):
        """–§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø"""
        
        st.markdown("### ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –∏–∑ —Å–∏–≥–Ω–∞–ª–∞
        if st.session_state.quick_entry_data is not None:
            quick = st.session_state.quick_entry_data
            st.success(f"üöÄ –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥: {quick['symbol_name']} ‚Ä¢ {quick['direction']} ‚Ä¢ ${quick['price']:.4f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ —Å–∏–≥–Ω–∞–ª–∞
            if quick.get('recommended_stop_loss') and quick.get('recommended_take_profit'):
                col1, col2 = st.columns(2)
                with col1:
                    st.info(f"üõ°Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ç–æ–ø: ${quick['recommended_stop_loss']:.4f}")
                with col2:
                    st.info(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ—Ñ–∏—Ç: ${quick['recommended_take_profit']:.4f}")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥", type="primary", use_container_width=True):
                    try:
                        position_id = self.position_tracker.add_position(
                            symbol=quick['symbol'],
                            direction=quick['direction'],
                            entry_price=quick['price'],
                            quantity=0.01,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –¥–µ–º–æ
                            strategy=quick['strategy'],
                            confidence=quick['confidence'],
                            custom_stop_loss=quick.get('recommended_stop_loss'),
                            custom_take_profit=quick.get('recommended_take_profit')
                        )
                        
                        st.success(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {position_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                        st.session_state.quick_entry_data = None  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        st.balloons()
                        st.rerun()
                        
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            with col2:
                if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥", use_container_width=True):
                    st.session_state.quick_entry_data = None  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    st.rerun()
            
            st.divider()
        
        # –û–±—ã—á–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
        col1, col2 = st.columns(2)
        
        with col1:
            symbol = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:",
                self.available_symbols,
                format_func=lambda x: self.symbol_names.get(x, x),
                key="new_position_symbol"
            )
            
            direction = st.selectbox(
                "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:",
                ["LONG", "SHORT"],
                key="new_position_direction"
            )
            
            entry_price = st.number_input(
                "–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:",
                min_value=0.0001,
                step=0.0001,
                format="%.4f",
                key="new_position_price"
            )
        
        with col2:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
            if symbol:
                try:
                    current_price = self.data_provider.get_current_price(symbol.replace('/', ''))
                    if current_price > 0:
                        st.info(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.4f}")
                        if entry_price == 0:
                            entry_price = current_price
                except:
                    pass
            
            quantity = st.number_input(
                "–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:",
                min_value=0.0001,
                step=0.0001,
                format="%.4f",
                key="new_position_quantity"
            )
            
            strategy = st.selectbox(
                "–°—Ç—Ä–∞—Ç–µ–≥–∏—è:",
                ["manual"] + list(self.get_available_strategies().keys()),
                format_func=lambda x: "ü§ô –†—É—á–Ω–æ–π –≤—Ö–æ–¥" if x == "manual" else self.get_available_strategies()[x]['name'],
                key="new_position_strategy"
            )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É
        if entry_price > 0 and symbol and direction:
            
            st.markdown("### üõ°Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É")
            
            account_balance = st.number_input(
                "–ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ ($):",
                min_value=100.0,
                value=10000.0,
                step=100.0,
                key="account_balance"
            )
            
            recommendations = self.position_tracker.get_risk_recommendations(
                symbol, entry_price, direction, account_balance
            )
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                use_recommended_sl = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å", value=True)
                if use_recommended_sl:
                    stop_loss = recommendations['recommended_stop_loss']
                    st.info(f"üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å: ${stop_loss:.4f}")
                else:
                    stop_loss = st.number_input(
                        "–°—Ç–æ–ø-–ª–æ—Å—Å:",
                        min_value=0.0001,
                        value=recommendations['recommended_stop_loss'],
                        step=0.0001,
                        format="%.4f",
                        key="custom_stop_loss"
                    )
            
            with col2:
                use_recommended_tp = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç", value=True)
                if use_recommended_tp:
                    take_profit = recommendations['recommended_take_profit']
                    st.info(f"üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${take_profit:.4f}")
                else:
                    take_profit = st.number_input(
                        "–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:",
                        min_value=0.0001,
                        value=recommendations['recommended_take_profit'],
                        step=0.0001,
                        format="%.4f",
                        key="custom_take_profit"
                    )
            
            with col3:
                use_recommended_size = st.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä", value=False)
                if use_recommended_size:
                    quantity = recommendations['position_size']
                    st.info(f"üìä –†–∞–∑–º–µ—Ä: {quantity:.4f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            with st.expander("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", expanded=False):
                for note in recommendations['notes']:
                    if note:
                        st.write(note)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
            if st.button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é", type="primary", use_container_width=True):
                if all([symbol, direction, entry_price > 0, quantity > 0]):
                    try:
                        position_id = self.position_tracker.add_position(
                            symbol=symbol,
                            direction=direction,
                            entry_price=entry_price,
                            quantity=quantity,
                            strategy=strategy,
                            confidence=85,  # –î–ª—è —Ä—É—á–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                            custom_stop_loss=stop_loss if not use_recommended_sl else None,
                            custom_take_profit=take_profit if not use_recommended_tp else None
                        )
                        
                        st.success(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è {position_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                        st.balloons()
                        
                        # –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
                        for key in ['new_position_price', 'new_position_quantity']:
                            if key in st.session_state:
                                st.session_state[key] = 0.0
                        
                        st.rerun()
                        
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {e}")
                else:
                    st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
    
    def render_active_positions(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        
        try:
            active_positions = self.position_tracker.get_active_positions()
            
            if not active_positions:
                st.info("üî≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
                return
            
            st.markdown("### üìà –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
            
            for position in active_positions:
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ P&L
                pnl_pct = position.unrealized_pnl_pct or 0
                if pnl_pct > 0:
                    card_color = "#d4edda"  # –ó–µ–ª–µ–Ω—ã–π
                    border_color = "#28a745"
                elif pnl_pct < -2:
                    card_color = "#f8d7da"  # –ö—Ä–∞—Å–Ω—ã–π
                    border_color = "#dc3545"
                else:
                    card_color = "#fff3cd"  # –ñ–µ–ª—Ç—ã–π
                    border_color = "#ffc107"
                
                # –ö–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
                with st.container():
                    st.markdown(f"""
                    <div style="padding: 1rem; margin: 0.5rem 0; border-radius: 10px; 
                               background-color: {card_color}; border-left: 5px solid {border_color};">
                        <h4>{self.symbol_names.get(position.symbol, position.symbol)} ‚Ä¢ {position.direction}</h4>
                        <p><strong>ID:</strong> {position.id}</p>
                        <p><strong>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</strong> {position.strategy}</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric("–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞", f"${position.entry_price:.4f}")
                        st.metric("–†–∞–∑–º–µ—Ä", f"{position.quantity:.4f}")
                    
                    with col2:
                        st.metric("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"${position.current_price:.4f}" if position.current_price else "N/A")
                        st.metric("P&L", f"{pnl_pct:+.2f}%" if position.unrealized_pnl_pct else "N/A")
                    
                    with col3:
                        st.metric("–°—Ç–æ–ø-–ª–æ—Å—Å", f"${position.stop_loss:.4f}" if position.stop_loss else "N/A")
                        st.metric("–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç", f"${position.take_profit:.4f}" if position.take_profit else "N/A")
                    
                    with col4:
                        if position.trailing_stop:
                            st.metric("–¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø", f"${position.trailing_stop:.4f}")
                        
                        # –í—Ä–µ–º—è –≤ –ø–æ–∑–∏—Ü–∏–∏
                        time_in_position = datetime.now() - position.entry_time
                        hours = int(time_in_position.total_seconds() / 3600)
                        st.metric("–í—Ä–µ–º—è –≤ –ø–æ–∑–∏—Ü–∏–∏", f"{hours}—á")
                    
                    # –ê–ª–µ—Ä—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏
                    if position.exit_alerts:
                        st.markdown("**üö® –ê–ª–µ—Ä—Ç—ã:**")
                        for alert in position.exit_alerts[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∞–ª–µ—Ä—Ç–∞
                            st.warning(alert)
                    
                    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        if st.button(f"‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é", key=f"close_{position.id}"):
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
                            current_price = position.current_price or position.entry_price
                            self.position_tracker.close_position(position.id, current_price, "Manual close")
                            st.success("‚úÖ –ü–æ–∑–∏—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞!")
                            st.rerun()
                    
                    with col2:
                        if st.button(f"üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É", key=f"update_{position.id}"):
                            try:
                                symbol_clean = position.symbol.replace('/', '')
                                new_price = self.data_provider.get_current_price(symbol_clean)
                                if new_price > 0:
                                    self.position_tracker.update_position_prices({symbol_clean: new_price})
                                    st.success("‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                                    st.rerun()
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                    
                    with col3:
                        if st.button(f"üìä –î–µ—Ç–∞–ª–∏", key=f"details_{position.id}"):
                            st.session_state[f"show_details_{position.id}"] = True
                    
                    st.divider()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    def render_positions_history(self):
        """–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        
        try:
            real_trades = self.position_tracker.get_real_trade_history()
            
            if not real_trades:
                st.info("üî≠ –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞")
                return
            
            st.markdown("### üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            df_real_history = pd.DataFrame(real_trades)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            df_display = df_real_history.copy()
            df_display['timestamp'] = df_display['timestamp'].dt.strftime('%Y-%m-%d %H:%M')
            df_display['symbol'] = df_display['symbol'].apply(lambda x: self.symbol_names.get(x, x))
            df_display['entry_price'] = df_display['entry_price'].apply(lambda x: f"${x:.4f}")
            df_display['exit_price'] = df_display['exit_price'].apply(lambda x: f"${x:.4f}" if x else "–ê–∫—Ç–∏–≤–Ω–∞")
            df_display['pnl_pct'] = df_display['pnl_pct'].apply(lambda x: f"{x:+.2f}%" if x is not None else "N/A")
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            df_display = df_display.rename(columns={
                'timestamp': '–î–∞—Ç–∞ –≤—Ö–æ–¥–∞',
                'symbol': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', 
                'direction': '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                'entry_price': '–í—Ö–æ–¥',
                'exit_price': '–í—ã—Ö–æ–¥',
                'pnl_pct': 'P&L %',
                'strategy': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è',
                'duration': '–î–Ω–µ–π'
            })
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            st.dataframe(df_display, use_container_width=True, hide_index=True)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º —Å–¥–µ–ª–∫–∞–º
            closed_trades = [t for t in real_trades if t['pnl_pct'] is not None]
            
            if closed_trades:
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    total_trades = len(closed_trades)
                    st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", total_trades)
                
                with col2:
                    profitable_trades = len([t for t in closed_trades if t['pnl_pct'] > 0])
                    win_rate = profitable_trades / total_trades * 100 if total_trades > 0 else 0
                    st.metric("–í–∏–Ω—Ä–µ–π—Ç", f"{win_rate:.1f}%")
                
                with col3:
                    avg_profit = np.mean([t['pnl_pct'] for t in closed_trades if t['pnl_pct'] > 0]) if any(t['pnl_pct'] > 0 for t in closed_trades) else 0
                    st.metric("–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å", f"{avg_profit:.2f}%")
                
                with col4:
                    best_trade = max(t['pnl_pct'] for t in closed_trades) if closed_trades else 0
                    st.metric("–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞", f"{best_trade:.2f}%")
            
            # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫", key="clear_real_history"):
                # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                active_positions = {k: v for k, v in self.position_tracker.positions.items() if v.is_active}
                self.position_tracker.positions = active_positions
                self.position_tracker.save_positions()
                st.success("–ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –æ—á–∏—â–µ–Ω–∞!")
                st.rerun()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def render_detailed_analysis(self):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π –º–æ–Ω–µ—Ç—ã"""
        
        st.markdown("## üìà –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            selected_symbol = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:",
                self.available_symbols,
                format_func=lambda x: self.symbol_names.get(x, x)
            )
        
        with col2:
            timeframe = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º:", ['5m', '15m', '1h', '4h'])
        
        with col3:
            if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True, key="analyze_button"):
                st.session_state.force_analysis = True
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        if 'force_analysis' in st.session_state and st.session_state.force_analysis:
            st.session_state.force_analysis = False
            
            with st.spinner(f"–ê–Ω–∞–ª–∏–∑ {self.symbol_names.get(selected_symbol, selected_symbol)}..."):
                result = self.analyze_symbol_enhanced(selected_symbol, timeframe)
                
                if 'error' not in result:
                    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                    col1, col2, col3, col4 = st.columns(4)
                    
                    with col1:
                        st.metric(
                            "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞",
                            f"${result['current_price']:.4f}",
                            f"{result['price_change_24h']:+.2f}%"
                        )
                    
                    with col2:
                        consensus_colors = {'BUY': 'üü¢', 'SELL': 'üî¥', 'HOLD': 'üü°'}
                        st.metric(
                            "–ö–æ–Ω—Å–µ–Ω—Å—É—Å",
                            f"{consensus_colors[result['consensus']]} {result['consensus']}"
                        )
                    
                    with col3:
                        st.metric(
                            "–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞",
                            f"{result['consensus_strength']:.0f}%"
                        )
                    
                    with col4:
                        st.metric(
                            "–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤",
                            result['active_signals']
                        )
                    
                    # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
                    if not result['data'].empty:
                        fig = make_subplots(
                            rows=3, cols=1,
                            shared_xaxes=True,
                            vertical_spacing=0.05,
                            subplot_titles=('–¶–µ–Ω–∞', 'RSI', '–û–±—ä–µ–º'),
                            row_heights=[0.5, 0.25, 0.25]
                        )
                        
                        # –°–≤–µ—á–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
                        fig.add_trace(
                            go.Candlestick(
                                x=result['data'].index,
                                open=result['data']['open'],
                                high=result['data']['high'],
                                low=result['data']['low'],
                                close=result['data']['close'],
                                name='Price'
                            ),
                            row=1, col=1
                        )
                        
                        # RSI
                        rsi = self.indicators.rsi(result['data']['close'])
                        fig.add_trace(
                            go.Scatter(x=result['data'].index, y=rsi, name='RSI'),
                            row=2, col=1
                        )
                        fig.add_hline(y=70, line_dash="dash", line_color="red", row=2, col=1)
                        fig.add_hline(y=30, line_dash="dash", line_color="green", row=2, col=1)
                        
                        # –û–±—ä–µ–º
                        fig.add_trace(
                            go.Bar(x=result['data'].index, y=result['data']['volume'], name='Volume'),
                            row=3, col=1
                        )
                        
                        fig.update_layout(height=700, showlegend=False)
                        st.plotly_chart(fig, use_container_width=True)
                    
                    # –°–∏–≥–Ω–∞–ª—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
                    if result['signals']:
                        st.markdown("### üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏")
                        
                        for signal in result['signals'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Å–∏–≥–Ω–∞–ª–æ–≤
                            with st.expander(f"{signal['type']} ‚Ä¢ {signal.get('strategy', 'Unknown')} ‚Ä¢ {signal.get('confidence', 0):.0f}%"):
                                col1, col2, col3 = st.columns(3)
                                
                                with col1:
                                    st.write(f"**–¶–µ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞:** ${signal['price']:.4f}")
                                    st.write(f"**–í—Ä–µ–º—è:** {signal['timestamp']}")
                                    st.write(f"**–ü—Ä–∏—á–∏–Ω–∞:** {signal.get('reason', 'N/A')}")
                                
                                with col2:
                                    if signal.get('recommended_stop_loss'):
                                        st.write(f"**üõ°Ô∏è –°—Ç–æ–ø-–ª–æ—Å—Å:** ${signal['recommended_stop_loss']:.4f}")
                                        st.write(f"**–†–∏—Å–∫:** -{signal.get('stop_pct', 0):.1f}%")
                                
                                with col3:
                                    if signal.get('recommended_take_profit'):
                                        st.write(f"**üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:** ${signal['recommended_take_profit']:.4f}")
                                        st.write(f"**–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª:** +{signal.get('tp_pct', 0):.1f}%")
                                        st.write(f"**R/R:** 1:{signal.get('risk_reward_ratio', 0):.1f}")
                    
                    # –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
                    st.markdown("### üå°Ô∏è –†—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
                    market = result.get('market_conditions', {})
                    
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("–¢—Ä–µ–Ω–¥", market.get('trend', 'N/A'))
                    with col2:
                        st.metric("–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", market.get('volatility', 'N/A'))
                    with col3:
                        st.metric("–û–±—ä–µ–º", market.get('volume', 'N/A'))
                    with col4:
                        recommended = market.get('recommended_strategies', [])
                        st.metric("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", len(recommended))
                    
                    if recommended:
                        st.info(f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {', '.join(recommended)}")
                
                else:
                    st.error(result['error'])
    
    def render_strategies_info(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö"""
        
        st.markdown("## ‚ÑπÔ∏è –û —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö")
        
        strategies = self.get_available_strategies()
        
        for key, strategy in strategies.items():
            with st.expander(f"{strategy['name']}", expanded=False):
                st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {strategy['description']}")
                st.markdown(f"**–î–µ—Ç–∞–ª–∏:** {strategy['details']}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                if key == 'mean_reversion':
                    st.markdown("""
                    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞:**
                    - –°—Ç–æ–ø-–ª–æ—Å—Å: 2.5%
                    - –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 5.0%
                    - –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 1:2
                    
                    **–õ—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
                    - –í –±–æ–∫–æ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö
                    - –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
                    - –ù–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
                    """)
                
                elif key == 'trend_following':
                    st.markdown("""
                    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞:**
                    - –°—Ç–æ–ø-–ª–æ—Å—Å: 3.0%
                    - –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 9.0%
                    - –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 1:3
                    
                    **–õ—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
                    - –í —Å–∏–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö
                    - –ù–∞ —Å—Ä–µ–¥–Ω–∏—Ö –∏ –¥–æ–ª–≥–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö
                    - –ü—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö –æ–±—ä–µ–º–∞—Ö —Ç–æ—Ä–≥–æ–≤
                    """)
                
                elif key == 'breakout':
                    st.markdown("""
                    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞:**
                    - –°—Ç–æ–ø-–ª–æ—Å—Å: 2.0%
                    - –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 6.0%
                    - –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 1:3
                    
                    **–õ—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
                    - –ü—Ä–∏ –ø—Ä–æ–±–æ—è—Ö —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
                    - –í –ø–µ—Ä–∏–æ–¥—ã –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –≤—Å–ø–ª–µ—Å–∫–æ–º
                    - –ü—Ä–∏ –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
                    """)
                
                elif key == 'scalping':
                    st.markdown("""
                    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞:**
                    - –°—Ç–æ–ø-–ª–æ—Å—Å: 1.5%
                    - –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 3.0%
                    - –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 1:2
                    
                    **–õ—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
                    - –ù–∞ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö (1m-5m)
                    - –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
                    - –¢—Ä–µ–±—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    """)
                
                elif key == 'momentum':
                    st.markdown("""
                    **–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞:**
                    - –°—Ç–æ–ø-–ª–æ—Å—Å: 3.5%
                    - –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: 7.0%
                    - –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 1:2
                    
                    **–õ—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
                    - –ü—Ä–∏ —Å–∏–ª—å–Ω—ã—Ö –∏–º–ø—É–ª—å—Å–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö
                    - –ü–æ—Å–ª–µ –≤–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
                    - –ü—Ä–∏ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –æ–±—ä–µ–º–æ–≤
                    """)
        
        st.markdown("### üí° –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        st.info("""
        - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        - –í—Å–µ–≥–¥–∞ —Å–æ–±–ª—é–¥–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —É—Ä–æ–≤–Ω–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
        - –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        - –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π
        """)
    
    def run(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        st.markdown("""
        <div class="main-header">
            <h1>üöÄ Trading Bot Pro Dashboard</h1>
            <p>15 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç ‚Ä¢ 5 –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π ‚Ä¢ –¢—Ä–µ–∫–µ—Ä –ø–æ–∑–∏—Ü–∏–π ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å—Ç–æ–ø/–ø—Ä–æ—Ñ–∏—Ç</p>
        </div>
        """, unsafe_allow_html=True)
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
        self.render_enhanced_controls()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        tab1, tab2, tab3, tab4, tab5 = st.tabs(["üö® –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "üìä –ü–æ–∑–∏—Ü–∏–∏", "üìà –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "üìä –ò—Å—Ç–æ—Ä–∏—è", "‚ÑπÔ∏è –û —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö"])
        
        with tab1:
            if st.session_state.monitoring_active and st.session_state.monitored_symbols:
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
                current_time = time.time()
                time_since_update = current_time - st.session_state.last_update_time
                
                if time_since_update >= st.session_state.update_interval:
                    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                    analysis_results = []
                    
                    with st.spinner("üîÑ –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞..."):
                        progress_bar = st.progress(0)
                        
                        for i, symbol in enumerate(st.session_state.monitored_symbols):
                            result = self.analyze_symbol_enhanced(symbol)
                            analysis_results.append(result)
                            progress_bar.progress((i + 1) / len(st.session_state.monitored_symbols))
                        
                        progress_bar.empty()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    st.session_state.analysis_results = analysis_results
                    st.session_state.last_update_time = current_time
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    analysis_results = st.session_state.get('analysis_results', [])
                
                if analysis_results:
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    self.render_alerts_panel(analysis_results)
                    self.render_overview_table(analysis_results)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï - 30 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 2
                if st.session_state.monitoring_active:
                    time_to_next = max(0, st.session_state.update_interval - time_since_update)
                    if time_to_next <= 5:  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—å—à–µ 5 —Å–µ–∫—É–Ω–¥
                        time.sleep(5)
                        st.rerun()
                    else:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
                        st.info(f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {int(time_to_next)} —Å–µ–∫—É–Ω–¥")
            
            else:
                st.info("üëÜ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
                st.markdown("### üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:")
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("""
                    **üíé 15 –¢–æ–ø–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:**
                    - Bitcoin, Ethereum, Binance Coin
                    - Solana, Cardano, Litecoin
                    - Avalanche, Polkadot, Chainlink
                    - Ripple, Dogecoin, Uniswap
                    - Bitcoin Cash, Cosmos, Algorand
                    """)
                
                with col2:
                    st.markdown("""
                    **üõ°Ô∏è –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
                    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
                    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç—É
                    - –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                    - –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –≤ –ø–æ–∑–∏—Ü–∏—é –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º
                    """)
        
        with tab2:
            self.render_positions_tab()
        
        with tab3:
            self.render_detailed_analysis()
        
        with tab4:
            st.markdown("## üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            try:
                real_trades = self.position_tracker.get_real_trade_history()
                
                if real_trades:
                    st.markdown("### üìà –í–∞—à–∏ —Å–¥–µ–ª–∫–∏")
                    
                    # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                    df_real_history = pd.DataFrame(real_trades)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    df_display = df_real_history.copy()
                    df_display['timestamp'] = df_display['timestamp'].dt.strftime('%Y-%m-%d %H:%M')
                    df_display['symbol'] = df_display['symbol'].apply(lambda x: self.symbol_names.get(x, x))
                    df_display['entry_price'] = df_display['entry_price'].apply(lambda x: f"${x:.4f}")
                    df_display['exit_price'] = df_display['exit_price'].apply(lambda x: f"${x:.4f}" if x else "–ê–∫—Ç–∏–≤–Ω–∞")
                    df_display['pnl_pct'] = df_display['pnl_pct'].apply(lambda x: f"{x:+.2f}%" if x is not None else "N/A")
                    
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
                    df_display = df_display.rename(columns={
                        'timestamp': '–î–∞—Ç–∞ –≤—Ö–æ–¥–∞',
                        'symbol': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', 
                        'direction': '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                        'entry_price': '–í—Ö–æ–¥',
                        'exit_price': '–í—ã—Ö–æ–¥',
                        'pnl_pct': 'P&L %',
                        'strategy': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è',
                        'duration': '–î–Ω–µ–π'
                    })
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    st.dataframe(df_display, use_container_width=True, hide_index=True)
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º —Å–¥–µ–ª–∫–∞–º
                    closed_trades = [t for t in real_trades if t['pnl_pct'] is not None]
                    
                    if closed_trades:
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            total_trades = len(closed_trades)
                            st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", total_trades)
                        
                        with col2:
                            profitable_trades = len([t for t in closed_trades if t['pnl_pct'] > 0])
                            win_rate = profitable_trades / total_trades * 100 if total_trades > 0 else 0
                            st.metric("–í–∏–Ω—Ä–µ–π—Ç", f"{win_rate:.1f}%")
                        
                        with col3:
                            avg_profit = np.mean([t['pnl_pct'] for t in closed_trades if t['pnl_pct'] > 0]) if any(t['pnl_pct'] > 0 for t in closed_trades) else 0
                            st.metric("–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å", f"{avg_profit:.2f}%")
                        
                        with col4:
                            best_trade = max(t['pnl_pct'] for t in closed_trades) if closed_trades else 0
                            st.metric("–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞", f"{best_trade:.2f}%")
                    
                    # –ì—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–¥–µ–ª–æ–∫
                    if len(closed_trades) > 5:
                        st.markdown("### üìà –ì—Ä–∞—Ñ–∏–∫ P&L —Å–¥–µ–ª–æ–∫")
                        
                        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ P&L –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                        pnl_data = []
                        cumulative_pnl = 0
                        
                        for trade in sorted(closed_trades, key=lambda x: x['timestamp']):
                            cumulative_pnl += trade['pnl_pct']
                            pnl_data.append({
                                'Date': trade['timestamp'],
                                'Individual P&L': trade['pnl_pct'],
                                'Cumulative P&L': cumulative_pnl
                            })
                        
                        pnl_df = pd.DataFrame(pnl_data)
                        
                        fig = make_subplots(
                            rows=2, cols=1,
                            subplot_titles=('–û—Ç–¥–µ–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏', '–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π P&L'),
                            vertical_spacing=0.1
                        )
                        
                        # –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
                        colors = ['green' if x > 0 else 'red' for x in pnl_df['Individual P&L']]
                        fig.add_trace(
                            go.Bar(
                                x=pnl_df['Date'],
                                y=pnl_df['Individual P&L'],
                                name='P&L —Å–¥–µ–ª–∫–∏',
                                marker_color=colors
                            ),
                            row=1, col=1
                        )
                        
                        # –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ P&L
                        fig.add_trace(
                            go.Scatter(
                                x=pnl_df['Date'],
                                y=pnl_df['Cumulative P&L'],
                                mode='lines+markers',
                                name='–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π P&L',
                                line=dict(color='blue', width=2)
                            ),
                            row=2, col=1
                        )
                        
                        fig.update_layout(height=600, showlegend=False)
                        st.plotly_chart(fig, use_container_width=True)
                
                else:
                    st.info("üî≠ –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, —á—Ç–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ
                    st.markdown("### üìä –î–æ—Å—Ç—É–ø–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–≤—ã—Ö —Å–¥–µ–ª–æ–∫:")
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.markdown("""
                        **üìà –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
                        - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
                        - –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ (–≤–∏–Ω—Ä–µ–π—Ç)
                        - –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
                        """)
                    
                    with col2:
                        st.markdown("""
                        **üìä –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**
                        - –ì—Ä–∞—Ñ–∏–∫ P&L –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                        - –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                        - –ê–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
                        """)
                    
                    with col3:
                        st.markdown("""
                        **üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
                        - –õ—É—á—à–∏–µ –∏ —Ö—É–¥—à–∏–µ —Å–¥–µ–ª–∫–∏
                        - –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
                        - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                        """)
            
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        
        with tab5:
            self.render_strategies_info()


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        dashboard = EnhancedTradingDashboard()
        dashboard.run()
    except Exception as e:
        st.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        st.markdown("""
        ### üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:
        1. **–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ** - `streamlit run app.py`
        2. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –º–æ–¥—É–ª–∏** - —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ
        3. **–û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à** - `streamlit cache clear`
        4. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç** - –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        
        ### üìã –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤:
        - `data_provider.py`
        - `strategies.py` 
        - `indicators.py`
        - `dominance_strategy.py`
        - `backtester.py`
        - `position_tracker.py`
        """)


if __name__ == "__main__":
    main()